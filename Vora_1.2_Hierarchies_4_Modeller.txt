#####################################
# VORA HIERARCHIES USING VORA TOOLS #
#####################################

sudo -iu vora 

rm addresses.csv
rm hierarchy.csv

hdfs dfs -rm /user/vora/hierarchy.csv
hdfs dfs -rm /user/vora/addresses.csv

## id, name, pred, succ, ord
echo "1,Diane,0,1,1" >> hierarchy.csv
echo "2,Austin,1,2,1" >> hierarchy.csv
echo "3,Joe,1,3,2" >> hierarchy.csv
echo "4,Denys,3,4,1" >> hierarchy.csv
echo "5,Jamie,3,5,2" >> hierarchy.csv
echo "6,Julie,3,6,3" >> hierarchy.csv
echo "7,Bob,3,7,4" >> hierarchy.csv
echo "8,Phil,3,8,5" >> hierarchy.csv

echo "1,Philly" >> addresses.csv
echo "2,Palo Alto" >> addresses.csv
echo "3,San Francisco" >> addresses.csv
echo "4,Den Bosch" >> addresses.csv
echo "5,Vancouver" >> addresses.csv
echo "6,Seattle" >> addresses.csv
echo "7,New York" >> addresses.csv
echo "8,Paris" >> addresses.csv

hdfs dfs -ls /user/vora/
hdfs dfs -put /home/vora/hierarchy.csv
hdfs dfs -put /home/vora/addresses.csv
hdfs dfs -ls /user/vora/
hdfs dfs -cat /user/vora/hierarchy.csv
hdfs dfs -cat /user/vora/addresses.csv

drop table hierarchy_table;
create table hierarchy_table
(id integer, name varchar(200), pred integer, succ integer, ord integer) 
using com.sap.spark.vora 
options (paths "/user/vora/hierarchy.csv");

select * from hierarchy_table;

drop table addresses;
create temporary table addresses
(id integer, address varchar(200)) 
using com.sap.spark.vora 
options (paths "/user/vora/addresses.csv");

select * from addresses;

CREATE VIEW HV AS SELECT * FROM HIERARCHY (USING hierarchy_table AS v JOIN PARENT u ON v.pred = u.succ START WHERE pred = 0 SET Node) AS H;

show tables;

select * from hierarchy_table;

select * from HV;

// minimal hierarchy query
SELECT name, IS_ROOT(Node) FROM HV;

SELECT name, IS_ROOT(Node) FROM HV WHERE IS_ROOT(Node) = true;

// Hierarchy self-join to get children
SELECT A.name, B.name FROM HV A, HV B WHERE IS_CHILD(A.Node, B.Node);

// Hierarchy self-join to get parent
SELECT A.name, B.name FROM HV A, HV B WHERE IS_PARENT(A.Node, B.Node);

// Hierarchy self-join to get sibling
SELECT A.name, B.name FROM HV A, HV B WHERE IS_SIBLING(A.Node, B.Node);

// Hierarchy self-join to get descendant
SELECT A.name, B.name FROM HV A, HV B WHERE IS_DESCENDANT(A.Node, B.Node);

// Hierarchy self-join to get ancestor
SELECT A.name, B.name FROM HV A, HV B WHERE IS_ANCESTOR(A.Node, B.Node);

// Hierarchy self-join to get following
SELECT A.name, B.name FROM HV A, HV B WHERE IS_FOLLOWING(A.Node, B.Node);

// Hierarchy self-join to get preceding
SELECT A.name, B.name FROM HV A, HV B WHERE IS_PRECEDING(A.Node, B.Node);

select * from addresses;

// Simple join of hierarchy view with another table
SELECT A.name, B.address FROM HV A, addresses B WHERE A.id = B.id;

// Get ids of the children of the root.
SELECT HV2.id as child FROM HV HV1, HV HV2 WHERE IS_CHILD(HV2.Node, HV1.Node) AND IS_ROOT(HV1.Node);

// Get addresses of the children of the root.
SELECT B.address FROM (SELECT HV2.id as child FROM HV HV1, HV HV2 WHERE IS_CHILD(HV2.Node, HV1.Node) AND IS_ROOT(HV1.Node)) A, addresses B WHERE A.child = B.id;

// Get names and addresses of 2nd level employees
SELECT A.name, B.address FROM HV A, addresses B WHERE A.id = B.id AND LEVEL(A.Node) = 2;

// Get names and addresses of 3rd level employees
SELECT A.name, B.address FROM HV A, addresses B WHERE A.id = B.id AND LEVEL(A.Node) = 3;
